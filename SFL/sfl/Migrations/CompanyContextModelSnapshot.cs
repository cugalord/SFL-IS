// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using web.Data;

#nullable disable

namespace sfl.Migrations
{
    [DbContext(typeof(CompanyContext))]
    partial class CompanyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobParcel", b =>
                {
                    b.Property<int>("JobsID")
                        .HasColumnType("int");

                    b.Property<string>("ParcelsID")
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("JobsID", "ParcelsID");

                    b.HasIndex("ParcelsID");

                    b.ToTable("JobParcel");
                });

            modelBuilder.Entity("sfl.Models.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CityCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StreetName", "StreetNumber", "CityCode")
                        .IsUnique()
                        .HasFilter("[CityCode] IS NOT NULL");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("sfl.Models.City", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(145)
                        .HasColumnType("nvarchar(145)");

                    b.HasKey("Code");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("sfl.Models.Job", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobStatusID")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeID")
                        .HasColumnType("int");

                    b.Property<string>("StaffUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("JobStatusID");

                    b.HasIndex("JobTypeID");

                    b.HasIndex("StaffUsername");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("sfl.Models.JobStatus", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("ID");

                    b.ToTable("JobStatus", (string)null);
                });

            modelBuilder.Entity("sfl.Models.JobType", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("ID");

                    b.ToTable("JobType", (string)null);
                });

            modelBuilder.Entity("sfl.Models.Parcel", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("ParcelStatusID")
                        .HasColumnType("int");

                    b.Property<string>("RecipientCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RecipientStreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RecipientStreetNumber")
                        .HasColumnType("int");

                    b.Property<string>("SenderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SenderStreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("SenderStreetNumber")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParcelStatusID");

                    b.HasIndex("RecipientStreetName", "RecipientStreetNumber", "RecipientCode");

                    b.HasIndex("SenderStreetName", "SenderStreetNumber", "SenderCode");

                    b.ToTable("Parcel", (string)null);
                });

            modelBuilder.Entity("sfl.Models.ParcelStatus", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("ID");

                    b.ToTable("ParcelStatus", (string)null);
                });

            modelBuilder.Entity("sfl.Models.Staff", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.HasKey("Username");

                    b.HasIndex("BranchID");

                    b.HasIndex("RoleID");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("sfl.Models.StaffRole", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.HasKey("ID");

                    b.ToTable("StaffRole", (string)null);
                });

            modelBuilder.Entity("sfl.Models.Street", b =>
                {
                    b.Property<string>("StreetName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<string>("CityCode")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StreetName", "StreetNumber", "CityCode");

                    b.HasIndex("CityCode");

                    b.ToTable("Street", (string)null);
                });

            modelBuilder.Entity("JobParcel", b =>
                {
                    b.HasOne("sfl.Models.Job", null)
                        .WithMany()
                        .HasForeignKey("JobsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sfl.Models.Parcel", null)
                        .WithMany()
                        .HasForeignKey("ParcelsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sfl.Models.Branch", b =>
                {
                    b.HasOne("sfl.Models.Street", "Street")
                        .WithOne("Branch")
                        .HasForeignKey("sfl.Models.Branch", "StreetName", "StreetNumber", "CityCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("sfl.Models.Job", b =>
                {
                    b.HasOne("sfl.Models.JobStatus", "JobStatus")
                        .WithMany("Jobs")
                        .HasForeignKey("JobStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sfl.Models.JobType", "JobType")
                        .WithMany("Jobs")
                        .HasForeignKey("JobTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sfl.Models.Staff", "Staff")
                        .WithMany("Jobs")
                        .HasForeignKey("StaffUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobStatus");

                    b.Navigation("JobType");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("sfl.Models.Parcel", b =>
                {
                    b.HasOne("sfl.Models.ParcelStatus", "ParcelStatus")
                        .WithMany("Parcels")
                        .HasForeignKey("ParcelStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sfl.Models.Street", "RecipientStreet")
                        .WithMany("Parcels")
                        .HasForeignKey("RecipientStreetName", "RecipientStreetNumber", "RecipientCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sfl.Models.Street", "SenderStreet")
                        .WithMany()
                        .HasForeignKey("SenderStreetName", "SenderStreetNumber", "SenderCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParcelStatus");

                    b.Navigation("RecipientStreet");

                    b.Navigation("SenderStreet");
                });

            modelBuilder.Entity("sfl.Models.Staff", b =>
                {
                    b.HasOne("sfl.Models.Branch", "Branch")
                        .WithMany("Staff")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sfl.Models.StaffRole", "Role")
                        .WithMany("Staff")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("sfl.Models.Street", b =>
                {
                    b.HasOne("sfl.Models.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("sfl.Models.Branch", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("sfl.Models.City", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("sfl.Models.JobStatus", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("sfl.Models.JobType", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("sfl.Models.ParcelStatus", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("sfl.Models.Staff", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("sfl.Models.StaffRole", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("sfl.Models.Street", b =>
                {
                    b.Navigation("Branch");

                    b.Navigation("Parcels");
                });
#pragma warning restore 612, 618
        }
    }
}
